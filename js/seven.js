paper.install(window);

// (function main() {

var vals = [1.1990733,1.1778404,1.1160966,1.1352947,1.0104376,1.205267,1.112324,1.1422869,1.0854268,1.0913248,1.0784954,1.1064351,0.98493904,1.1002061,1.0943208,0.8973564,1.0017107,0.69427335,0.7897269,0.9349351,0.95396173,1.0557703,1.0023896,0.36993313,0.6498875,0.31014162,0.40997207,0.7902543,0.846532,0.92219514,0.5475123,0.36107868,0.725818,0.5056419,0.733486,0.98704314,0.92641675,0.9983058,0.95425534,0.7966663,1.0280176,1.0552561,1.2775769,1.3182467,1.1679443,1.0787957,1.2405565,1.3194182,1.2879349,1.2973106,1.2971944,1.3270589,1.1781113,1.2904134,1.2974304,1.3380826,1.2910734,1.304613,1.2995099,1.3410106,1.1916455,1.3015199,1.3090835,1.3415437,1.2991151,1.3066826,1.3072025,1.3251587,1.1874229,1.2963778,1.2960557,1.3426903,1.3080187,1.2974584,1.3092607,1.3291504,1.1796596,1.2910376,1.301653,1.3354071,1.2862108,1.3000995,1.2944287,1.318438,1.1660928,1.2909286,1.2905238,1.3150653,1.2777381,1.0595331,0.2264816,0.17706022,0.20228893,1.2237248,0.4894108,0.16201295,1.2134458,1.2021326,1.1160194,1.123409,1.120087,1.1930805,1.1178069,1.1365962,1.091421,0.7905157,0.20032932,0.20576683,0.82497454,1.0831847,0.79842883,0.21928018,0.21735206,0.24379884,0.19298403,0.19302675,0.35597348,0.4542365,0.25988543,0.3239622,0.21379599,0.27005213,0.1738297,0.16630958,0.28924403,0.21513495,0.10527005,0.1444527,0.19179946,0.15231638,0.0970323,0.19046344,0.34065267,0.30710775,0.15541735,0.081855826,0.19241908,0.08360845,0.20847216,1.1047134,1.2859092,0.8625312,0.5419476,0.20091304,1.1335417,0.55852294,1.1681825,1.349032,1.3238376,1.2967542,1.3521277,1.0813675,1.4068078,1.5339648,1.428599,1.3367639,1.3280928,1.3144493,1.3196727,1.6857203,1.3100122,1.3130586,1.3144834,1.3287933,1.3288075,1.314489,1.3132733,1.357469,1.2968521,1.3061405,1.3118078,1.3370954,1.3198856,1.3121904,1.3080196,1.3622465,1.2984954,1.3021395,1.2955992,1.314051,1.3064055,1.2989835,1.2993617,1.2596241,1.0968763,0.24633154,0.19594273,0.1929885,0.23365599,0.86972415,0.25389525,0.13527976,1.215143,1.1911445,0.987432,0.9776443,1.119773,1.2013534,1.1136171,0.3433273,0.3913307,0.19134153,0.18737538,0.17148723,0.20652245,0.38611144,0.20448445,0.14460135,0.14306496,0.16911888,0.19219933,0.17239268,0.23059183,0.18056712,0.1702455,0.24938953,0.1943453,0.2960689,0.31281114,0.23193562,0.16509669,0.19543852,0.17364976,0.5770676,0.28330123,0.5331763,0.35650977,0.17904966,0.07502328,0.13679507,0.26274958,0.54693705,0.42714745,1.0303332,1.3534868,1.2094396,0.30468395,0.06858083,0.84816694,1.7151078,1.609033,1.7782464,1.7040663,1.3551279,0.98356396,0.9108509,1.6019968,1.7048731,1.3261628,1.4499916,1.1916976,1.1243911,1.5585872,1.1996096,1.1125532,1.2658669,0.8493514,0.99261874,0.8181175,0.9590889,1.2784275,1.171244,0.86047465,0.82607496,0.9544579,0.65847075,1.0180609,1.3248782,1.3333225,1.3138251,1.2699673,1.1815054,1.3112111,1.3102993,0.68615973,0.8008264,1.320557,1.3109816,1.3115385,0.035715044,0.21057665,0.29381216,0.36463976,0.17666487,0.19293402,0.23402885,0.20075287,0.54353964,1.1661795,0.3586077,0.26485458,0.24340041,0.38728642,1.142056,0.41671032,0.22866546,0.2309029,0.19056301,0.3148951,0.2620323,0.18284285,0.20560378,0.30242226,0.3531585,0.29654226,0.36073634,0.43416905,0.36312392,0.3727452,0.22565688,0.33723405,0.3384011,0.19716053,0.27004227,0.34212795,0.64297193,0.45706922,0.3127551,0.30767593,0.6767173,0.87149614,0.66233385,0.3647684,0.8064376,0.32300398,0.5845718,0.28630114,0.87425417,0.6920756,0.52845585,1.0880276,1.5880327,1.2018666,0.70700073,0.57610476,1.3803376,1.714355,1.7358608,1.7644365,1.7629633,1.7718335,1.7508322,1.7812439,1.8138869,1.7428172,1.746435,1.6545789,1.5411916,1.4457437,1.6161277,1.6317022,1.6949358,1.542599,1.4305185,1.1665487,1.0232867,0.94779015,1.276503,1.4073813,0.92551225,1.0220639,0.88226426,0.6763189,0.48968297,0.55650836,0.82354456,0.7684288,0.58182395,0.3556621,0.39999804,0.462907,0.49154487,0.3313844,0.89776284,0.73202944,0.4443147,0.7609747,0.8533206,1.2337754,1.3092304,1.4213063,0.6545397,1.3702128,1.0308738,0.35500208,0.40328956,0.20353243,0.25364092,0.23712076,0.31917527,0.264419,0.26149273,0.2106036,0.22753836,0.34607714,0.4108195,0.34682432,0.19126739,0.29490998,0.4225714,0.42383385,0.3428104,0.28200212,0.29229474,0.40904957,0.40842348,0.32924715,0.28960612,0.2565498,0.24783933,0.39530724,0.75459737,0.35622254,0.24628463,0.2526514,0.9996178,0.94547343,0.6904398,0.2958437,0.6416711,0.33585614,0.691416,0.2540098,0.55103517,0.47512764,0.8935776,1.000759,1.2320887,0.9010589,0.47588477,0.6840262,1.2914323,1.4835329,1.6902525,1.7582104,1.7819523,1.790565,1.6570959,1.7655482,1.798917,1.760638,1.7197579,1.7588407,1.6330757,1.7588081,1.768032,1.7694435,1.4282832,1.0458654,0.8728726,0.97499263,0.8364833,0.9675935,0.99551183,0.9517676,0.85852003,1.1852126,1.3504183,1.1065259,0.8977861,0.782531,0.8946023,1.1383797,1.2207241,0.7326203,0.99130803,0.7170588,0.39925268,0.47530264,0.5384516,0.6420786,0.62486464,0.26627514,0.26096597,0.49145195,0.81954753,0.9715455,0.39919946,0.4336334,0.46344623,0.43275097,0.36357453,0.28943747,0.32783687,0.2630633,0.4406333,0.29625204,0.29941607,0.2440631,0.26625803,0.30924785,0.34094676,0.3787111,0.23187889,0.28926352,0.26244825,0.24604319,0.2092872,0.27475977,0.31221464,0.26789233,0.28678715,0.26194763,0.41874933,0.3603901,0.48002917,0.722616,1.0092202,0.5215141,0.27855387,0.43086743,1.1483597,1.2709627,1.3475407,1.2170395,0.8399903,0.48466834,0.88764715,0.9495745,1.6754007,0.99458504,1.6609246,1.5909284,1.4588084,1.0423136,0.6831332,1.1595908,1.8017199,1.532631,1.7357031,1.6819918,1.6360726,1.6528726,1.5768538,1.5527005,1.8079627,1.7338865,1.5279237,0.688784,0.76277196,1.3066978,1.4963044,0.7643699,0.6353328,0.6923046,0.9266997,0.7474819,1.0788763,0.81980985,0.8269429,1.0156956,1.0730438,1.3813629,1.0806125,0.6256738,0.97089803,0.9788215,1.2020172,0.84178394,0.51062745,1.1546491,1.0569708,0.7988474,0.64775425,0.81312937,1.2553006,0.9895417,0.6740206,0.46362424,0.27311698,0.19401315,0.40223685,0.31304273,0.32051283,0.15782323,0.3776834,0.4277132,0.33785343,0.26001775,0.22902799,0.24639988,0.34969088,0.21297872,0.27429664,0.21448295,0.21030225,0.23862511,0.26791134,0.2363412,0.19665715,0.2610802,0.21516085,0.21407886,0.16280192,0.24620193,0.47330832,0.29351005,0.21178615,0.19497545,0.6025693,0.8193537,1.1218255,1.2341356,1.2770551,1.0630264,0.6782487,1.1136662,1.3861768,1.3674349,1.2639914,0.7513539,1.2980845,1.5064532,1.3746086,1.353306,0.6369466,0.9773165,0.722133,0.8399218,1.3256944,1.6579831,1.5384715,1.1310638,0.8893513,1.1224289,0.9255073,0.97214967,1.4468973,1.7511207,1.6755043,1.2488053,0.9631808,1.3019303,0.957299,0.5900665,0.59962505,0.8483293,1.5421076,1.0163666,0.3802527,0.51428497,0.6514541,0.6633521,0.8164358,0.79629266,0.6363096,0.9417676,0.72442937,1.1883916,0.90716743,0.64484096,0.44367078,0.5261049,1.1013355,0.6523077,0.81505466,0.61795014,0.79578805,0.73486245,0.5999949,0.731458,0.92449373,0.8958265,0.51580846,0.43894717,0.25162357,0.23233467,0.40534854,0.18969661,0.26812112,0.1312275,0.37883002,0.25536442,0.267007,0.26183155,0.28252608,0.27794018,0.32007688,0.29919803,0.21734792,0.21880683,0.18317188,0.1643233,0.20978397,0.2334178,0.2353961,0.21684125,0.16940227,0.21658428,0.19555941,0.22224937,0.3563139,0.2637671,0.1760096,0.22366612,0.18023145,0.6342758,0.740532,1.1677451,1.3646033,1.2833648,1.0688682,1.1775123,1.2623845,1.2873557,0.7934327,0.2566088,0.40658554,0.35674223,1.0862362,0.33523732,0.40140143,0.6760059,0.5510628,0.8690585,0.904137,0.78594166,0.7763841,1.043797,1.0880349,1.0924716,1.2679038,1.2368242,1.0981712,0.96777755,0.959121,1.1264648,1.325215,1.1036383,1.2339342,1.0559064,0.585954,0.5708547,0.91907424,0.9490507,0.8433804,0.4221905,0.48732176,0.6524178,0.61152345,0.63942486,0.47936234,0.697054,0.73268926,0.8343997,0.8605442,0.74564236,0.72814804,0.78158903,0.82844883,0.820802,0.45794672,0.55528766,0.37025613,0.36341769,0.36590403,0.58042616,0.76260257,0.5446481,0.25709736,0.21196406,0.16722675,0.3390149,0.43343025,0.2924273,0.21470891,0.16564648,0.4492409,0.23933512,0.24494201,0.25438336,0.2203433,0.22883779,0.24924701,0.23618658,0.20016988,0.19122025,0.18098411,0.15835445,0.16347846,0.1640356,0.16206951,0.1492144,0.17207772,0.19763197,0.15969765,0.08739725,0.1000204,0.18239893,0.1924464,0.13266777,0.069603994,0.14803539,0.3163009,0.807672,1.0259137,1.0422053,0.5009016,0.7313257,0.907952,0.8481795,0.48502558,0.35748744,0.589053,0.31596613,0.63921255,0.24522094,0.7911668,0.45857298,0.45734334,0.80759484,1.0439845,0.83576953,0.5964709,0.8479051,1.0515554,1.2926898,1.4064628,1.4124933,1.4417195,1.3840923,1.3303412,1.4186088,1.3716319,1.3673002,1.2413449,1.1778432,1.0766954,1.1645662,1.2902548,1.236121,1.1631596,0.9790003,1.0179851,0.7907174,0.6100186,0.6051452,0.53068405,0.60232407,0.66673744,0.59130645,0.48402038,0.4297053,0.32355192,0.51032937,0.64437443,0.48659575,0.23066142,0.22093509,0.19572695,0.31692758,0.19300126,0.24609672,0.24726549,0.21189852,0.55772376,0.3176228,0.5600504,0.69955105,0.67453516,0.5592369,0.24720603,0.53549916,0.66832995,1.1503792,1.0613168,0.18561302,0.19427653,0.21549839,0.42650497,0.2421113,0.18093216,0.14767171,0.14403832,0.14121975,0.15410513,0.18310271,0.16186145,0.15559739,0.086951904,0.10172551,0.0502104,0.045911215,0.068010814,0.08925053,0.12863116,0.06659575,0.060515977,0.11853608,0.1098913,0.3476594,0.85298544,0.73064595,0.27292633,0.38168576,0.2528931,0.8294697,0.51616687,0.71190035,0.4568317,0.30641633,0.70637655,0.75500816,0.68359697,0.70576113,0.764972,0.9848077,1.0550412,0.8969553,0.77000356,0.95296234,1.0039495,1.1205297,1.0352803,1.0381671,1.1479965,1.3286558,1.3399318,1.2163175,0.97122836,1.0269535,0.9003479,0.8065014,0.8981049,1.0496979,1.1260353,0.9690998,0.56358427,0.7089535,0.55685747,0.54617494,0.6528298,0.7357132,0.86879283,0.6689525,0.5785965,0.4304072,0.8969184,1.1945662,0.58018976,0.28546524,0.4569314,0.37597382,1.3833315,0.9660556,1.3356953,0.25456345,0.476318,0.6742784,0.46569967,0.5929951,0.1151927,0.33120057,0.111201994,0.16878706,0.4745326,0.8271725,0.7309773,0.4750409,0.07077184,1.1894287,1.1675224,0.783668,0.2189915,0.27137876,1.1821226,1.0737643,0.6989914,0.27499023,0.4090152,0.1255644,0.121151835,0.12756881,0.1831332,0.16513911,0.1443253,0.0891984,0.11924354,0.09107632,0.052834954,0.038643107,0.050370548,0.067364976,0.09852426,0.07477202,0.112226896,0.08752589,0.076631725,0.07483921,0.07283121,0.09324059,0.104321055,0.06481768,0.082829915,0.11263619,0.10104063,0.12123476,0.11328419,0.090474635,0.11529887,0.09299694,0.0873927,0.1276355,0.37503508,0.6215379,0.25113937,0.15621932,0.47253424,0.28945702,0.6439644,0.617428,0.55067974,0.8429481,0.83573097,0.3959738,0.9527126,0.62319,0.92366445,1.0655801,0.90168846,0.60165876,0.63569534,0.95315874,1.4015713,1.0519403,1.3736166,1.3704028,1.3734155,1.1704779,0.85860777,1.3616858,1.4076866,1.3753014,1.3604407,1.369425,1.3849185,1.3725178,1.3425474,1.3709165,1.397919,1.3571572,1.3572477,0.7532192,0.107978165,0.37603673,1.3391293,1.2637316,0.13738188,0.08844408,0.09691248,0.0884135,0.06700334,0.08105416,0.085186064,0.07947627,0.059220724,1.187031,1.1237866,1.1436381,1.0976484,1.0876914,1.1750783,1.0915221,1.1030046,1.0789208,1.0484169,1.117473,0.8808121,0.5004656,0.99129117,1.068167,1.0987791,1.050095,1.0470272,1.1284845,0.78526795,0.303991,0.30956486,1.0292472,1.0961673,0.85580355,1.0597498,1.1127777,0.7014819,0.14308453,0.1958051,0.5279378,1.1122837,0.99943423,1.0625782,1.1483592,0.8788099,0.22371641,0.23213649,0.9225859,1.1100541,1.08804,1.0646478,1.1717844,1.0383605,0.39014488,0.48764515,1.03491,1.1406518,1.1229812,1.1346959,1.4447689,1.3748692,1.1351372,1.0062716,1.2993126,1.4008493,1.3847842,1.3496102,1.4562564,1.4015099,1.3954504,1.3413388,1.3764812,1.4109566,1.379302,1.3459738,1.4534777,1.3892545,1.3952879,1.3821781,1.3829132,1.397728,1.358383,1.3441112,1.4462997,1.3930038,1.3861387,1.3761542,1.3703274,1.4066249,1.3549212,1.3325022,1.0868055,0.22632438,0.9919119,1.3622935,1.3529296,0.15133241,0.08443002,0.06855025,0.06828152,0.050144106,0.07260876,0.087395474,0.065679215,0.06529356,];

var characterPaths = null;
var stats = [];
$.getJSON("fonts/Courier_Prime.json", function(data) {
    // charData = data;
    characterPaths = {};

    for (var key in data) {
        var cp = new CompoundPath(data[key].data);
        // cp.fillColor = new Color(1, 0, 0, 0.5);
        cp.visible = false;
        var st = compoundPathStats(cp);
        // cp.position = new Point(100, 100);
        cp.scale(new Point(0.2, -0.2), new Point(0, 0));
        // cp.translate(new Point(0, 260));
        // console.log(key + " " + JSON.stringify(st));
        stats.push(st);
        characterPaths[key] = cp;
        
    }
    // console.log(stats);
    console.log("done");
});

var segmentColour = "#fff";
var backgroundColour = "#1a1a1a";

var canvas = document.getElementById("myCanvas");

paper.setup(canvas);

project.activeLayer.transformContent = true;

var digit = project.importSVG(document.getElementById("digit"), {
    expandShapes: true
});

digit.children[0].name = "box";
digit.children[1].name = "segments";

var a = "A".charCodeAt();
digit.children["segments"].children.forEach(function(segment) {
    segment.name = String.fromCharCode(a++);
    segment.reverse();
});

var dpoint = digit.position.clone();
digit.position = new Point(0, 0);
digit.strokeColor = null;
digit.children["segments"].fillColor = segmentColour;
digit.children["box"].fillColor = backgroundColour;
digit.children["box"].strokeColor = backgroundColour;

var tbt = new Group();
var dbounds = digit.getBounds();
var trans = new Point();
var n = 12;
var q = 0;
function make(x, y) {
    tbt.removeChildren();
    digit.visible = true;
    for (var i = 0; i < y; i++) {
        for (var j = 0; j < x; j++) {
            var d = digit.clone();

            trans.x = (dbounds.width-0.2) * j + dpoint.x;
            trans.y = (dbounds.height-0.2) * i + dpoint.y;
            d.children["box"].translate(trans);

            d.children["segments"].children.forEach(function(segment) {
                segment.translate(trans);
            });
            for (var k = 0; k < 8; k++) {
                // if (vals[q] < ) {
                //     d.children["segments"].children[6].fillColor = "red";
                // }
                // d.children["segments"].children[k].fillColor = (vals[q] < 0.7) ? backgroundColour : segmentColour;
                q++;
            }
            tbt.addChild(d);
        }
    }
    digit.visible = false;
    view.draw();
}

make(3*4,3)

digit.visible = false;



// var letters = project.importSVG(document.getElementById("letter"), {
    // expandShapes: true
// });
var letter = null; //new CompoundPath(charData["S"].data);

function pointsInCompoundPath(cp) {
    return [].concat.apply([], cp.children.map(function(path) {
        return path.segments.map(function(segment) {
            return segment.point;
        });
    }));
}

function getStats(list) {
    var min = Math.min.apply(null, list);
    var max = Math.max.apply(null, list);
    return {
        min: min,
        max: max,
        range: max - min,
    };
}

function pointsStats(points) {    
    return {
        x: getStats(points.map(function(point) { return point.x; })),
        y: getStats(points.map(function(point) { return point.y; })),
    };
}

function compoundPathStats(cp) {
    var points = pointsInCompoundPath(cp);
    return pointsStats(points);
}

function scaleCompoundPath(cp, pointOrFloat, shift) {
    var scale = pointOrFloat;
    if (pointOrFloat.x === undefined) {
        scale = new Point(pointOrFloat, pointOrFloat);
    }
    
    var atts = ["_point", "_handleIn", "_handleOut"];
    
    for (var j = 0; j < cp.children.length; j++) {
        var segs = cp.children[j].segments;
        cp.children[j].segments = segs.map(function(e) {

            if (shift) {
                e["_point"] = e["_point"].subtract(shift);
            }
            
            for (var i = 0; i < atts.length; i++) {
                e[atts[i]] = e[atts[i]].multiply(scale);
            }
            return e;
        });
    }

}

function fitLetter(letter, bounds) {

    // var letter = _letter.clone();
    var stats = compoundPathStats(letter);

    var aspectRatio = stats.x.range / stats.y.range;

    var wantedSize = new Size(bounds.size);
    var shift = new Point(stats.x.min, stats.y.min);
    var scale = new Point(wantedSize.width/stats.x.range, wantedSize.height/stats.y.range);

    var wantedAspectRatio = wantedSize.width / wantedSize.height;

    // console.log(wantedAspectRatio > aspectRatio);
    if (wantedAspectRatio > aspectRatio) {
        scale = scale.y;
    }
    else {
        scale = scale.x;
    }

    // letter.scale(0.5);
    scaleCompoundPath(letter, scale, shift);

    // letter.position = bounds.position;
    letter.fillColor = new Color(1, 0.5, 0.8, 0.25);

    return letter;
}

var start = performance.now();
function lightDigits(digitGroup, path) {
    // path.position = digitGroup.position;
    
    digitGroup.children.forEach(function(d) {
        var allInside = true;
        d.children["segments"].children.forEach(function(segment){
            segment.fillColor = "green"; //null;        // console.log(e.bounds);

            var isect = segment.intersect(path);

             isect.fillColor = null; "#666";
            isect.strokeColor = "red";
            
            if (isect.children !== undefined && isect.children.length === 0) {
                allInside = false;
                return;
            }

           


            if (isect.area > segment.area*0.5) {
                segment.fillColor = segmentColour;
            }
        });

        if (allInside) {
            // d.children["segments"].fillColor = "red";
        }
    });
}

// lightDigits(tbt, letter);
console.log("took:" + (performance.now() - start));


project.activeLayer.scale(1.0, new Point(0,0))
view.draw();

var gr = new Group();
for (var i = 0; i < 3; i++) {
    for (var j = 0; j < 3; j++) {
        var k = j * n + i;
        gr.children.push(tbt.children[k]);
    }
}

// gr.fillColor = "red";

// var tool = new Tool();
var currentPath = null;

function Action() {
    var tool = new Tool();
    
    tool.onKeyDown = function(event) {

        try {
            // var glyph = $("#letters [unicode="+event.character+"]");
            if (currentPath) {
                currentPath.visible = false;
            }
            // letter = new CompoundPath(charData[event.character].data);
            // letter.visible = false;
            // console.log(charData[event.character].data);
        currentPath = characterPaths[event.character];
        currentPath.visible = true;
            var path = fitLetter(currentPath, gr.bounds);
        
            lightDigits(tbt, path);   
        }
        catch(err) {
            console.log(err);
        }
        // console.log(event);
    }
    
}

var action = new Action();

// tbt.visible = false;

view.draw();
